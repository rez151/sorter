#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 04, 2020 11:50:46 AM CET  platform: Linux

import sys

import PIL
from PIL import Image
from PIL.ImageTk import PhotoImage

from sorter.videohandler import VideoHandler

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

from trash import TinySorter1_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    TinySorter1_support.set_Tk_var()
    top = TinySorter(root)
    TinySorter1_support.init(root, top)
    root.mainloop()


w = None


def create_TinySorter(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    TinySorter1_support.set_Tk_var()
    top = TinySorter(w)
    TinySorter1_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_TinySorter():
    global w
    w.destroy()
    w = None


class TinySorter:
    def __init__(self, top=None):

        self.vid = VideoHandler()

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans} -size 10 -weight bold -slant " \
                 "roman -underline 0 -overstrike 0"
        font9 = "-family {DejaVu Sans} -size 10 -weight bold -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1311x718+310+228")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("TinySorter")
        top.configure(background="#ffffff")
        top.configure(highlightcolor="black")

        self.Classes = tk.LabelFrame(top)
        self.Classes.place(relx=0.069, rely=0.279, relheight=0.481
                           , relwidth=0.244)
        self.Classes.configure(relief='groove')
        self.Classes.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Classes.configure(text='''Classes''')
        self.Classes.configure(background="#dddddd")

        self.Class1 = tk.LabelFrame(self.Classes)
        self.Class1.place(relx=0.063, rely=0.116, relheight=0.217, relwidth=0.875
                          , bordermode='ignore')
        self.Class1.configure(relief='groove')
        self.Class1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Class1.configure(text='''Class 1''')

        self.TakePicture1 = tk.Button(self.Class1)
        self.TakePicture1.place(relx=0.071, rely=0.4, height=31, width=109
                                , bordermode='ignore')
        self.TakePicture1.configure(activebackground="#f9f9f9")
        self.TakePicture1.configure(background="#bfbfbf")
        self.TakePicture1.configure(text='''Take Picture''')
        self.TakePicture1.bind('<Button-1>', lambda e: TinySorter1_support.takePic1Button(e))

        self.TSeparator1 = ttk.Separator(self.Class1)
        self.TSeparator1.place(relx=0.579, rely=0.12, relheight=0.933
                               , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.Counter1 = tk.Listbox(self.Class1)
        self.Counter1.place(relx=0.679, rely=0.267, relheight=0.613
                            , relwidth=0.229, bordermode='ignore')
        self.Counter1.configure(background="#d9d9d9")
        self.Counter1.configure(font="TkFixedFont")
        self.Counter1.configure(highlightthickness="0")
        self.Counter1.configure(selectbackground="#c4c4c4")

        self.Class2 = tk.LabelFrame(self.Classes)
        self.Class2.place(relx=0.063, rely=0.406, relheight=0.217, relwidth=0.875
                          , bordermode='ignore')
        self.Class2.configure(relief='groove')
        self.Class2.configure(font=font9)
        self.Class2.configure(text='''Class 2''')

        self.TakePicture2 = tk.Button(self.Class2)
        self.TakePicture2.place(relx=0.071, rely=0.4, height=31, width=109
                                , bordermode='ignore')
        self.TakePicture2.configure(activebackground="#f9f9f9")
        self.TakePicture2.configure(background="#bfbfbf")
        self.TakePicture2.configure(text='''Take Picture''')
        self.TakePicture2.bind('<Button-1>', lambda e: TinySorter1_support.takePic2Button(e))

        self.TSeparator1_2 = ttk.Separator(self.Class2)
        self.TSeparator1_2.place(relx=0.571, rely=0.133, relheight=0.933
                                 , bordermode='ignore')
        self.TSeparator1_2.configure(orient="vertical")

        self.Counter2 = tk.Listbox(self.Class2)
        self.Counter2.place(relx=0.679, rely=0.267, relheight=0.613
                            , relwidth=0.229, bordermode='ignore')
        self.Counter2.configure(background="#d9d9d9")
        self.Counter2.configure(font="TkFixedFont")
        self.Counter2.configure(highlightthickness="0")
        self.Counter2.configure(selectbackground="#c4c4c4")

        self.Frame1 = tk.Frame(self.Classes)
        self.Frame1.place(relx=0.063, rely=0.696, relheight=0.217, relwidth=0.859
                          , bordermode='ignore')
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.TSeparator1_1 = ttk.Separator(self.Frame1)
        self.TSeparator1_1.place(relx=0.582, rely=0.0, relheight=1.067)
        self.TSeparator1_1.configure(orient="vertical")

        self.TakePicture3 = tk.Button(self.Frame1)
        self.TakePicture3.place(relx=0.073, rely=0.4, height=31, width=111)
        self.TakePicture3.configure(background="#bfbfbf")
        self.TakePicture3.configure(text='''Take Picture''')

        self.Class3 = tk.Text(self.Frame1)
        self.Class3.place(relx=0.0, rely=0.0, relheight=0.32, relwidth=0.349)
        self.Class3.configure(background="#d9d9d9")
        self.Class3.configure(borderwidth="0")
        self.Class3.configure(font=font10)
        self.Class3.configure(highlightbackground="#bfbfbf")
        self.Class3.configure(inactiveselectbackground="#bfbfbf")
        self.Class3.configure(selectbackground="#bfbfbf")
        self.Class3.configure(wrap="word")

        self.Counter3 = tk.Listbox(self.Frame1)
        self.Counter3.place(relx=0.691, rely=0.133, relheight=0.613
                            , relwidth=0.233)
        self.Counter3.configure(background="#d9d9d9")
        self.Counter3.configure(font="TkFixedFont")
        self.Counter3.configure(highlightthickness="0")

        self.Training = tk.LabelFrame(top)
        self.Training.place(relx=0.32, rely=0.279, relheight=0.369
                            , relwidth=0.214)
        self.Training.configure(relief='groove')
        self.Training.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Training.configure(text='''Training''')
        self.Training.configure(background="#dddddd")

        self.TrainModel = tk.Button(self.Training)
        self.TrainModel.place(relx=0.571, rely=0.075, height=31, width=105
                              , bordermode='ignore')
        self.TrainModel.configure(activebackground="#f9f9f9")
        self.TrainModel.configure(background="#bfbfbf")
        self.TrainModel.configure(text='''Train Model''')
        self.TrainModel.bind('<Button-1>', lambda e: TinySorter1_support.trainModel(e))

        self.TSeparator2 = ttk.Separator(self.Training)
        self.TSeparator2.place(relx=0.007, rely=0.226, relwidth=1.214
                               , bordermode='ignore')

        self.Epochs = tk.Label(self.Training)
        self.Epochs.place(relx=0.143, rely=0.34, height=21, width=50
                          , bordermode='ignore')
        self.Epochs.configure(activebackground="#f9f9f9")
        self.Epochs.configure(text='''Epochs''')

        self.Batch_Size = tk.Label(self.Training)
        self.Batch_Size.place(relx=0.143, rely=0.528, height=21, width=72
                              , bordermode='ignore')
        self.Batch_Size.configure(activebackground="#f9f9f9")
        self.Batch_Size.configure(text='''Batch Size''')

        self.Learning_Rate = tk.Label(self.Training)
        self.Learning_Rate.place(relx=0.143, rely=0.717, height=21, width=94
                                 , bordermode='ignore')
        self.Learning_Rate.configure(activebackground="#f9f9f9")
        self.Learning_Rate.configure(text='''Learning Rate''')

        self.Reset = tk.Button(self.Training)
        self.Reset.place(relx=0.75, rely=0.868, height=31, width=65
                         , bordermode='ignore')
        self.Reset.configure(activebackground="#f9f9f9")
        self.Reset.configure(background="#bfbfbf")
        self.Reset.configure(text='''Reset''')
        self.Reset.bind('<Button-1>', lambda e: TinySorter1_support.reset(e))

        self.batchSize = ttk.Combobox(self.Training)
        self.batchSize.place(relx=0.607, rely=0.528, relheight=0.079
                             , relwidth=0.239, bordermode='ignore')
        self.value_list = [16, 32, 64, 128, 256, 512, ]
        self.batchSize.configure(values=self.value_list)
        self.batchSize.configure(textvariable=TinySorter1_support.combobox)
        self.batchSize.configure(takefocus="")

        self.Epoch = tk.Spinbox(self.Training, from_=1.0, to=1000.0)
        self.Epoch.place(relx=0.607, rely=0.34, relheight=0.087, relwidth=0.243
                         , bordermode='ignore')
        self.Epoch.configure(activebackground="#f9f9f9")
        self.Epoch.configure(background="white")
        self.Epoch.configure(font="TkDefaultFont")
        self.Epoch.configure(highlightbackground="black")
        self.Epoch.configure(selectbackground="#c4c4c4")
        self.Epoch.configure(textvariable=TinySorter1_support.spinbox)

        self.learningRate = tk.Spinbox(self.Training, from_=0.0, to=0.1)
        self.learningRate.place(relx=0.607, rely=0.717, relheight=0.087
                                , relwidth=0.243, bordermode='ignore')
        self.learningRate.configure(activebackground="#f9f9f9")
        self.learningRate.configure(background="white")
        self.learningRate.configure(font="TkDefaultFont")
        self.learningRate.configure(highlightbackground="black")
        self.learningRate.configure(increment="1e-5")
        self.learningRate.configure(selectbackground="#c4c4c4")
        self.learningRate.configure(textvariable=TinySorter1_support.learningRate)

        self.PreviewModel = tk.LabelFrame(top)
        self.PreviewModel.place(relx=0.549, rely=0.292, relheight=0.453
                                , relwidth=0.191)
        self.PreviewModel.configure(relief='groove')
        self.PreviewModel.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.PreviewModel.configure(text='''Preview Model''')
        self.PreviewModel.configure(background="#dddddd")

        self.Message1 = tk.Message(self.PreviewModel)
        self.Message1.place(relx=0.08, rely=0.062, relheight=0.231
                            , relwidth=0.848, bordermode='ignore')
        self.Message1.configure(background="#dddddd")
        self.Message1.configure(text='''You must first train a model before you can preview it here.''')
        self.Message1.configure(width=212)

        self.TSeparator3 = ttk.Separator(self.PreviewModel)
        self.TSeparator3.place(relx=-0.032, rely=0.308, relwidth=1.04
                               , bordermode='ignore')

        self.Modellist = tk.Listbox(self.PreviewModel)
        self.Modellist.place(relx=0.04, rely=0.338, relheight=0.418
                             , relwidth=0.896, bordermode='ignore')
        self.Modellist.configure(background="white")
        self.Modellist.configure(font="TkFixedFont")
        self.Modellist.configure(selectbackground="#c4c4c4")

        self.TSeparator3_5 = ttk.Separator(self.PreviewModel)
        self.TSeparator3_5.place(relx=0.0, rely=0.831, relwidth=1.04
                                 , bordermode='ignore')

        self.ExportModel = tk.Button(self.PreviewModel)
        self.ExportModel.place(relx=0.52, rely=0.862, height=31, width=114
                               , bordermode='ignore')
        self.ExportModel.configure(activebackground="#f9f9f9")
        self.ExportModel.configure(background="#bfbfbf")
        self.ExportModel.configure(text='''Export Model''')
        self.ExportModel.bind('<Button-1>', lambda e: TinySorter1_support.exportModel(e))

        self.Labelframe6 = tk.LabelFrame(top)
        self.Labelframe6.place(relx=0.748, rely=0.292, relheight=0.439, relwidth=0.244)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Labelframe6.configure(text='''Webcam''')
        self.Labelframe6.configure(background="#dddddd")

        self.TSeparator3_6 = ttk.Separator(self.Labelframe6)
        self.TSeparator3_6.place(relx=-0.031, rely=0.825, relwidth=1.063
                                 , bordermode='ignore')

        self.Startsorting = tk.Button(self.Labelframe6)
        self.Startsorting.place(relx=0.625, rely=0.857, height=31, width=108
                                , bordermode='ignore')
        self.Startsorting.configure(activebackground="#f9f9f9")
        self.Startsorting.configure(background="#bfbfbf")
        self.Startsorting.configure(text='''Start sorting''')
        self.Startsorting.bind('<Button-1>', lambda e: TinySorter1_support.startSorting(e))

        self.CamPic = tk.Canvas(self.Labelframe6, width=self.vid.width, height=self.vid.height)
        # self.CamPic.place(relx=0.031, rely=0.063, relheight=0.733, relwidth=1)
        self.CamPic.pack()
        self.CamPic.configure(background="#cccccc")
        # self.CamPic.configure(borderwidth="2")
        self.CamPic.configure(relief="ridge")
        self.CamPic.configure(selectbackground="#c4c4c4")

        self.HFULogo = tk.Canvas(top)
        self.HFULogo.place(relx=0.816, rely=0.014, relheight=0.196
                           , relwidth=0.176)
        self.HFULogo.configure(borderwidth="2")
        self.HFULogo.configure(relief="ridge")
        self.HFULogo.configure(selectbackground="#c4c4c4")

        self.IntelLogo = tk.Canvas(top)
        self.IntelLogo.place(relx=0.008, rely=0.014, relheight=0.141
                             , relwidth=0.169)
        self.IntelLogo.configure(borderwidth="2")
        self.IntelLogo.configure(relief="ridge")
        self.IntelLogo.configure(selectbackground="#c4c4c4")

        self.delay = 15
        self.update()

    def update(self):
        # Get a frame from the video source
        ret, frame = self.vid.get_frame()

        if ret:
            self.photo = PIL.ImageTk.PhotoImage(
                image=PIL.Image.fromarray(frame))#.resize((self.vid.width, self.vid.height), 0))
            # print(self.photo.height(), self.photo.width())
            self.CamPic.create_image(-100, 0, image=self.photo, anchor=tk.NW)

        self.CamPic.after(self.delay, self.update)


if __name__ == '__main__':
    vp_start_gui()
